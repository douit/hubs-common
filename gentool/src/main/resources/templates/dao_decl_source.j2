package com.bluecc.income.dao;

import com.bluecc.income.procs.AbstractProcs;
import org.jdbi.v3.sqlobject.config.RegisterBeanMapper;
import org.jdbi.v3.sqlobject.customizer.Bind;
import org.jdbi.v3.sqlobject.statement.SqlQuery;
import org.jdbi.v3.sqlobject.SqlObject;

import java.util.List;
import java.util.Set;
import java.util.Map;
import java.util.function.Consumer;
import com.google.common.collect.Maps;

import com.bluecc.income.model.*;
import com.bluecc.income.helper.ModelWrapper;

import javax.inject.Inject;
import javax.inject.Provider;

import com.bluecc.hubs.feed.LiveObjects;
import com.bluecc.income.exchange.IProc;
import com.bluecc.hubs.fund.ProtoMeta;
import com.bluecc.hubs.fund.SqlMeta;

import com.bluecc.hubs.fund.pubs.Action;
import com.bluecc.hubs.fund.model.IModel;
import reactor.core.publisher.Flux;
import java.util.function.Function;
import com.google.protobuf.Message;
import java.util.stream.Collectors;
import com.bluecc.hubs.stub.{{ent.messageType}};

public class {{ent.name}}Delegator extends AbstractProcs{

    @Inject
    Provider<LiveObjects> liveObjectsProvider;

    @RegisterBeanMapper({{ent.name}}.class)
    public interface Dao extends SqlObject{
        @SqlQuery("select * from {{ent.underscore}}")
        List<{{ent.name}}> list{{ent.name}}();
        @SqlQuery("select * from {{ent.underscore}} where {{ent.underscorePk}}=:id")
        {{ent.name}} get{{ent.name}}(@Bind("id") String id);

        @SqlQuery("select count(*) from {{ent.underscore}}")
        int count{{ent.name}}();

        // for relations
        {% for rel in ent.validRelations %} 
        @RegisterBeanMapper(value = {{ent.name}}.class, prefix = "{{ent.prefix}}")
        @RegisterBeanMapper(value = {{rel.relEntityName}}.class, prefix = "{{rel.prefix}}")
        default Map<String, {{ent.name}}> chain{{rel.name}}(ProtoMeta protoMeta,
                                               Map<String, {{ent.name}}> inMap,
                                               boolean succInvoke) {
            return chain{{rel.name}}(protoMeta, inMap, "", Maps.newHashMap(), succInvoke);
        }

        @RegisterBeanMapper(value = {{ent.name}}.class, prefix = "{{ent.prefix}}")
        @RegisterBeanMapper(value = {{rel.relEntityName}}.class, prefix = "{{rel.prefix}}")
        default Map<String, {{ent.name}}> chain{{rel.name}}(ProtoMeta protoMeta,
                                               Map<String, {{ent.name}}> inMap,
                                               String whereClause,
                                               Map<String, Object> binds,
                                               boolean succInvoke) {
            SqlMeta sqlMeta = protoMeta.getSqlMeta("{{ent.name}}", succInvoke);
            SqlMeta.ViewDecl view = sqlMeta.leftJoin({{rel.upperSnake}});
            return getHandle().select(view.getSql() + " " + whereClause)
                    .bindMap(binds)
                    .reduceRows(inMap, (map, rr) -> {
                        {{ent.name}} p = map.computeIfAbsent(rr.getColumn("{{ent.prefix}}_{{ent.underscorePk}}", String.class),
                                id -> rr.getRow({{ent.name}}.class));
                        if (rr.getColumn("{{rel.prefix}}_{{rel.mainTargetCol}}", String.class) != null) {
                            p.{{rel.relGetter}}()
                                    .add(rr.getRow({{rel.relEntityName}}.class));
                        }
                        return map;
                    });
        }
        {% endfor %}
    }

    {% for rel in ent.validRelations %} 
    Consumer<Map<String, {{ent.name}}>> {{rel.varName}}(Dao dao, boolean succ) {
        return e -> dao.chain{{rel.name}}(protoMeta, e, succ);
    }

    Consumer<Map<String, {{ent.name}}>> {{rel.varName}}(Dao dao,
                                        String whereClause,
                                        Map<String, Object> binds,
                                        boolean succ) {
        return e -> dao.chain{{rel.name}}(protoMeta, e, whereClause, binds, succ);
    }
    {% endfor %}

    public {{ent.name}} get(IProc.ProcContext ctx, String id){
        return ctx.attach(Dao.class).get{{ent.name}}(id);
    }

    public List<{{ent.name}}> all(IProc.ProcContext ctx){
        return ctx.attach(Dao.class).list{{ent.name}}();
    }

    public int count(IProc.ProcContext ctx){
        return ctx.attach(Dao.class).count{{ent.name}}();
    }

{{agent_source}}
{{query_rels}}
    
    public {{ent.name}}.{{ent.name}}Builder seed(){
        return {{ent.name}}.builder()
                .{{ent.pk}}(sequence.nextStringId());
    }
}
