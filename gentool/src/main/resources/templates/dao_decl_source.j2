package com.bluecc.income.dao;

import com.bluecc.hubs.stub.EntityBucket;
import com.bluecc.hubs.stub.QueryList;
import com.bluecc.hubs.stub.QueryProfile;
import com.bluecc.income.exchange.IDelegator;
import com.bluecc.income.procs.AbstractProcs;
import com.bluecc.income.procs.Buckets;
import com.bluecc.income.procs.SelectorBindings;

import org.jdbi.v3.sqlobject.config.RegisterBeanMapper;
import org.jdbi.v3.sqlobject.customizer.Bind;
import org.jdbi.v3.sqlobject.statement.SqlQuery;
import org.jdbi.v3.sqlobject.SqlObject;

import java.io.Writer;
import java.util.List;
import java.util.Set;
import java.util.Map;
import java.util.HashMap;
import java.util.function.Consumer;
import com.google.common.collect.Maps;
import com.google.common.collect.Sets;

import com.bluecc.income.model.*;
import com.bluecc.income.helper.ModelWrapper;
import com.bluecc.income.procs.Buckets;

import javax.inject.Inject;
import javax.inject.Provider;

import com.bluecc.hubs.feed.LiveObjects;
import com.bluecc.income.exchange.IProc;
import com.bluecc.hubs.fund.ProtoMeta;
import com.bluecc.hubs.fund.SqlMeta;

import com.bluecc.hubs.fund.pubs.Action;
import com.bluecc.hubs.fund.model.IModel;
import reactor.core.publisher.Flux;
import java.util.function.Function;
import com.google.protobuf.Message;
import java.util.stream.Collectors;
import io.grpc.stub.StreamObserver;
import com.bluecc.income.exchange.IChainQuery;

import com.bluecc.hubs.stub.{{ent.messageType}};

public class {{ent.name}}Delegator extends AbstractProcs implements IChainQuery<{{ent.name}}>, IDelegator {

    @Inject
    Provider<LiveObjects> liveObjectsProvider;
    @Inject
    Provider<Buckets> buckets;

    @RegisterBeanMapper({{ent.name}}.class)
    public interface Dao extends SqlObject{
        @SqlQuery("select * from {{ent.underscore}}")
        List<{{ent.name}}> list{{ent.name}}();
        @SqlQuery("select * from {{ent.underscore}} where {{ent.underscorePk}}=:id")
        {{ent.name}} get{{ent.name}}(@Bind("id") String id);

        @SqlQuery("select count(*) from {{ent.underscore}}")
        int count{{ent.name}}();

        // for relations
        {% for rel in ent.validRelations %} 
        @RegisterBeanMapper(value = {{ent.name}}.class, prefix = "{{ent.prefix}}")
        @RegisterBeanMapper(value = {{rel.relEntityName}}.class, prefix = "{{rel.prefix}}")
        default Map<String, {{ent.name}}> chain{{rel.name}}(ProtoMeta protoMeta,
                                               Map<String, {{ent.name}}> inMap,
                                               boolean succInvoke) {
            return chain{{rel.name}}(protoMeta, inMap, "", SelectorBindings.EMPTY, succInvoke);
        }

        @RegisterBeanMapper(value = {{ent.name}}.class, prefix = "{{ent.prefix}}")
        @RegisterBeanMapper(value = {{rel.relEntityName}}.class, prefix = "{{rel.prefix}}")
        default Map<String, {{ent.name}}> chain{{rel.name}}(ProtoMeta protoMeta,
                                               Map<String, {{ent.name}}> inMap,
                                               String whereClause,
                                               SelectorBindings binds,
                                               boolean succInvoke) {
            SqlMeta sqlMeta = protoMeta.getSqlMeta("{{ent.name}}", succInvoke);
            SqlMeta.ViewDecl view = sqlMeta.leftJoin({{rel.upperSnake}});
            return binds.enrich(getHandle().select(view.getSql() + " " + whereClause))
                    .reduceRows(inMap, (map, rr) -> {
                        {{ent.name}} p = map.computeIfAbsent(rr.getColumn("{{ent.prefix}}_{{ent.underscorePk}}", String.class),
                                id -> rr.getRow({{ent.name}}.class));
                        if (rr.getColumn("{{rel.prefix}}_{{rel.mainTargetCol}}", String.class) != null) {
                            p.{{rel.relGetter}}()
                                    .add(rr.getRow({{rel.relEntityName}}.class));
                        }
                        return map;
                    });
        }
        {% endfor %}
    }

    {% for rel in ent.validRelations %} 
    public Consumer<Map<String, {{ent.name}}>> {{rel.varName}}(Dao dao, boolean succ) {
        return e -> dao.chain{{rel.name}}(protoMeta, e, succ);
    }

    public Consumer<Map<String, {{ent.name}}>> {{rel.varName}}(Dao dao,
                                        String whereClause,
                                        SelectorBindings binds,
                                        boolean succ) {
        return e -> dao.chain{{rel.name}}(protoMeta, e, whereClause, binds, succ);
    }
    {% endfor %}


    public Map<String, {{ent.name}}> chainQuery(IProc.ProcContext c, String... incls) {
        return chainQuery(c, Sets.newHashSet(incls));
    }
    
    public Map<String, {{ent.name}}> chainQuery(IProc.ProcContext c, Set<String> incls) {
        return chainQuery(c, "", SelectorBindings.EMPTY, incls);
    }
    public Map<String, {{ent.name}}> chainQuery(IProc.ProcContext c, String whereClause,
                                           SelectorBindings binds,
                                           Set<String> incls) {
        Map<String, {{ent.name}}> dataMap = Maps.newHashMap();
        Dao dao = c.getHandle().attach(Dao.class);
        Consumer<Map<String, {{ent.name}}>> chain = tenant(dao, whereClause, binds, false);
        {% for rel in ent.validRelations %} 
        if (incls.contains({{rel.protoName|uppercase}})) {
            chain = chain.andThen({{rel.varName}}(dao, whereClause, binds, true));
        }
        {% endfor %}
        chain.accept(dataMap);
        return dataMap;
    }

    public void chainQueryDataList(IProc.ProcContext c,
                                   Set<String> incls,
                                   StreamObserver<{{ent.name}}Data> responseObserver){
        chainQueryDataList(c, incls, "", SelectorBindings.EMPTY, responseObserver);
    }

    public void chainQueryDataList(IProc.ProcContext c,
                                   Set<String> incls,
                                   String whereClause,
                                   SelectorBindings binds,
                                   StreamObserver<{{ent.name}}Data> responseObserver) {

        Map<String, {{ent.name}}> dataMap = chainQuery(c, whereClause, binds, incls);
        dataMap.values().stream().map(data -> {
            {{ent.name}}Data.Builder {{ent.varName}}Data = data.toHeadBuilder();
            {% for rel in ent.validRelations %} 
            data.{{rel.beanRelGetter}}().forEach(e -> 
                {{ent.varName}}Data.{{rel.relationOp}}(e.{{rel.toBuilder}}()));
            {%- endfor %}
            return {{ent.varName}}Data.build();
        }).forEach(e -> responseObserver.onNext(e));
    }    

    public {{ent.name}} get(IProc.ProcContext ctx, String id){
        return ctx.attach(Dao.class).get{{ent.name}}(id);
    }

    public List<{{ent.name}}> all(IProc.ProcContext ctx){
        return ctx.attach(Dao.class).list{{ent.name}}();
    }

    public int count(IProc.ProcContext ctx){
        return ctx.attach(Dao.class).count{{ent.name}}();
    }


    public void store({{ent.name}} {{ent.varName}}){
        store({{ent.varName}}, true);
    }

    public void store({{ent.name}} {{ent.varName}}, boolean genId){
        process(c ->{
            if(genId){
                {{ent.varName}}.{{ent.pkSetter}}(sequence.nextStringId());
            }
            storeOrUpdate(c, {{ent.varName}}.toData());
        });
    }

    @Override
    public void serialize(QueryList queryList, Writer writer) {
        buckets.get().writeTo(this, "{{ent.name}}", writer);
    }

    @Override
    public void queryList(QueryProfile request, StreamObserver<EntityBucket> responseObserver){
        buckets.get().queryList(this, request, responseObserver);
    }

{{agent_source}}
{{query_rels}}
    
    public {{ent.name}}.{{ent.name}}Builder seed(){
        return {{ent.name}}.builder()
                .{{ent.pk}}(sequence.nextStringId());
    }
}
