package com.bluecc.domain.generic.dao;

import com.bluecc.domain.util.Sequence;
import com.google.inject.Inject;

import com.querydsl.core.types.Predicate;
import com.bluecc.domain.guice.Transactional;
import com.querydsl.sql.dml.SQLInsertClause;
import com.bluecc.domain.dummy.repository.AbstractRepository;

import java.util.List;
import org.joda.time.DateTime;

import com.bluecc.domain.sql.model.*;
import com.querydsl.core.types.QBean;
import static com.querydsl.core.types.Projections.bean;

import static com.bluecc.domain.sql.model.Q{{ent.name}}.{{ent.varName}};

// {{ent.title}}
public class {{ent.name}}Repository extends AbstractRepository {
    @Inject Sequence sequence;

    public static final QBean<{{ent.name}}> {{ent.varName}}Bean = bean({{ent.name}}.class, {{ent.varName}}.all());

    @Transactional
    public String save({{ent.name}} entity) {
        if (entity.{{ent.pkGetter}}() != null) {
            entity.setLastUpdatedStamp(DateTime.now());
            update({{ent.varName}}).populate(entity).execute();
            return entity.{{ent.pkGetter}}();
        }
        entity.setCreatedStamp(DateTime.now());
        String uid=sequence.nextStringId();
        entity.{{ent.pkSetter}}(uid);
        return create(entity);
        // return insert({{ent.varName}}).populate(entity)
        //        .executeWithKey({{ent.varName}}.{{ent.pk}});
    }

    @Transactional
    public String create({{ent.name}} entity){
        // 因为没有自增键, 所以ps.getGeneratedKeys()没有返回值
        insert({{ent.varName}}).populate(entity)
                .executeWithKey({{ent.varName}}.{{ent.pk}});
        return entity.{{ent.pkGetter}}();
    }

    @Transactional
    public {{ent.name}} findById(String id) {
        return selectFrom({{ent.varName}}).where({{ent.varName}}.{{ent.pk}}.eq(id)).fetchOne();
    }


    @Transactional
    public List<{{ent.name}}> findAll(Predicate expr) {
        return selectFrom({{ent.varName}}).where(expr).fetch();
    }

    @Transactional
    public long count() {
        return selectFrom({{ent.varName}}).fetchCount();
    }

    @Transactional
    public void delete({{ent.name}} s) {
        delete({{ent.varName}})
            .where({{ent.varName}}.{{ent.pk}}.eq(s.{{ent.pkGetter}}()))
            .execute();
    }
}

/*
-- keys: {{ent.keyNames}}

-- fields --
    {% for f in ent.publicFields %}
    {{f.javaType}} {{f.name}}
    {%- endfor %}

-- relations --
    {% for rel in ent.relations %}
    {% if rel.type=='many' %}+{% else %}-{% endif %} {{rel.name}} ({{rel.type}}, autoRelation: {{rel.autoRelation}}, keymaps: {{rel.desc}})
    {%- endfor %}
*/

